import discord
from discord.ext import commands
import asyncio
import os
from flask import Flask
from threading import Thread

# Keep-alive server for Azure
app = Flask('')

@app.route('/')
def home():
    return "Bot is alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# Bot setup
intents = discord.Intents.default()
intents.message_content = True
intents.reactions = True
intents.members = True

bot = commands.Bot(command_prefix='!', intents=intents)

# Role Weights
ROLE_WEIGHTS = {
    1208814380997673004: 10,  # Prime Minister
    1208814380997673003: 8,   # Leader of the Opposition
    1208814380905664609: 5    # Other role
}

ALLOWED_ROLE_ID = 1208814381094277129
SPEAKER_ROLE_ID = 1208814381094277129
LOG_CHANNEL_ID = None  # Replace with actual log channel ID if desired

# Vote Emojis
VOTE_EMOJIS = {
    "‚úÖ": "Yes",
    "‚ùå": "No",
    "ü§∑": "Abstain"
}

# Active Vote State
active_vote = {
    "message": None,
    "motion": "",
    "channel": None,
    "open": False,
    "vote_counts": {"Yes": 0, "No": 0, "Abstain": 0},
    "tie": False
}

# Helpers
def has_allowed_role(member):
    return any(role.id == ALLOWED_ROLE_ID for role in member.roles)

def has_speaker_role(member):
    return any(role.id == SPEAKER_ROLE_ID for role in member.roles)

async def log_vote_result(text):
    if LOG_CHANNEL_ID:
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(text)

# Events
@bot.event
async def on_ready():
    print(f'‚úÖ Bot is online as {bot.user}')

# Commands
@bot.command(name="motion")
async def motion(ctx, *, motion_text: str):
    if not has_allowed_role(ctx.author):
        await ctx.send("üö´ You don't have permission to start a motion.")
        return

    if active_vote["open"]:
        await ctx.send("‚ö†Ô∏è A vote is already in progress. Use `!end` first.")
        return

    embed = discord.Embed(
        title="üó≥Ô∏è Parliamentary Motion",
        description=motion_text,
        color=0x1ABC9C
    )
    embed.set_footer(text="React with ‚úÖ, ‚ùå, or ü§∑. Voting is open until manually ended with !end.")
    vote_msg = await ctx.send(embed=embed)

    for emoji in VOTE_EMOJIS:
        await vote_msg.add_reaction(emoji)

    active_vote.update({
        "message": vote_msg,
        "motion": motion_text,
        "channel": ctx.channel,
        "open": True,
        "vote_counts": {"Yes": 0, "No": 0, "Abstain": 0},
        "tie": False
    })

@bot.command(name="end")
async def end(ctx):
    if not has_allowed_role(ctx.author):
        await ctx.send("üö´ You don't have permission to end a vote.")
        return

    if not active_vote["open"]:
        await ctx.send("‚ùå There is no active vote to end.")
        return

    try:
        vote_msg = await active_vote["channel"].fetch_message(active_vote["message"].id)
    except discord.NotFound:
        await ctx.send("‚ùå Vote message not found.")
        return

    vote_counts = {"Yes": 0, "No": 0, "Abstain": 0}
    user_votes = {}

    for reaction in vote_msg.reactions:
        if reaction.emoji not in VOTE_EMOJIS:
            continue

        async for user in reaction.users():
            if user.bot:
                continue
            if user.id in user_votes:
                continue

            member = vote_msg.guild.get_member(user.id)
            if not member:
                continue

            user_weight = 0
            for role in member.roles:
                if role.id in ROLE_WEIGHTS:
                    user_weight = max(user_weight, ROLE_WEIGHTS[role.id])

            vote_choice = VOTE_EMOJIS[reaction.emoji]
            vote_counts[vote_choice] += user_weight
            user_votes[user.id] = vote_choice

    active_vote["vote_counts"] = vote_counts

    if vote_counts["Yes"] > vote_counts["No"] and vote_counts["Abstain"] < vote_counts["Yes"]:
        outcome = "**‚úÖ Motion passes.**"
    elif vote_counts["Yes"] == vote_counts["No"]:
        outcome = "**‚öñÔ∏è Tie detected. Speaker must cast a tie-breaking vote using `!tiebreak yes` or `!tiebreak no`.**"
        active_vote["tie"] = True
    else:
        outcome = "**‚ùå Motion fails.**"

    result = (
        f"**Results for:** {active_vote['motion']}\n"
        f"‚úÖ Yes: {vote_counts['Yes']}\n"
        f"‚ùå No: {vote_counts['No']}\n"
        f"ü§∑ Abstain: {vote_counts['Abstain']}\n\n"
        f"{outcome}"
    )
    await ctx.send(result)
    await log_vote_result(result)

    if not active_vote["tie"]:
        active_vote.update({
            "message": None,
            "motion": "",
            "channel": None,
            "open": False,
            "vote_counts": {"Yes": 0, "No": 0, "Abstain": 0},
            "tie": False
        })

@bot.command(name="tiebreak")
async def tiebreak(ctx, choice: str):
    if not has_speaker_role(ctx.author):
        await ctx.send("üö´ You don't have permission to cast a tie-breaking vote.")
        return

    if not active_vote["open"] or not active_vote["tie"]:
        await ctx.send("‚ùå There is no tie to break at this time.")
        return

    choice = choice.lower()
    if choice not in ["yes", "no"]:
        await ctx.send("‚ö†Ô∏è Invalid choice. Use `!tiebreak yes` or `!tiebreak no`.")
        return

    active_vote["vote_counts"][choice.capitalize()] += 1

    if active_vote["vote_counts"]["Yes"] > active_vote["vote_counts"]["No"]:
        outcome = "**‚úÖ Motion passes after tie-break.**"
    else:
        outcome = "**‚ùå Motion fails after tie-break.**"

    result = (
        f"**Tie-breaker Result for:** {active_vote['motion']}\n"
        f"‚úÖ Yes: {active_vote['vote_counts']['Yes']}\n"
        f"‚ùå No: {active_vote['vote_counts']['No']}\n"
        f"ü§∑ Abstain: {active_vote['vote_counts']['Abstain']}\n\n"
        f"{outcome}"
    )
    await ctx.send(result)
    await log_vote_result(result)

    active_vote.update({
        "message": None,
        "motion": "",
        "channel": None,
        "open": False,
        "vote_counts": {"Yes": 0, "No": 0, "Abstain": 0},
        "tie": False
    })

# Run everything
keep_alive()
bot.run(os.getenv("BOT_TOKEN"))
